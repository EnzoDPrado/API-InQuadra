trigger: none
pr: none

jobs:
  - job: develop
    displayName: 'Publishing InQuadra API'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    pool:
      vmImage: "ubuntu-latest"
    steps:
      - checkout: self

      - task: NodeTool@0
        inputs:
          versionSpec: "18.15.0"
        displayName: "Install Node.js"

      - script: |
          # ... (your existing build script)
        displayName: "Install dependencies, build and publish artifact"

      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: "$(System.DefaultWorkingDirectory)"
          includeRootFolder: false
          archiveType: "zip"
          archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip"
          replaceExistingArchive: true
        displayName: "Archive files"

      - task: PublishPipelineArtifact@1
        inputs:
          artifactName: "drop"
          targetPath: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip"
        displayName: "Publish artifact"

  - job: deploy
    displayName: 'Deploy to DigitalOcean'
    dependsOn: develop
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/deploy'))
    pool:
      vmImage: "ubuntu-latest"
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "3.x"
          addToPath: true

      - script: |
          # Define your DigitalOcean server SSH details
          SERVER_IP=$(SERVER_IP)
          SSH_USERNAME=$(SSH_USER)
          SSH_KEY_PATH=$(SSH_KEY_PATH)

          # Copy the deployment artifact to the server
          scp -i "$SSH_KEY_PATH" -o StrictHostKeyChecking=no "$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip" "$SSH_USERNAME@$SERVER_IP:$(FOLDER_PATH)"

          # Connect to the server and deploy the artifact
          ssh -i "$SSH_KEY_PATH" -o StrictHostKeyChecking=no "$SSH_USERNAME@$SERVER_IP" "cd $(FOLDER_PATH) && unzip -o $(Build.BuildId).zip && pm2 restart inquadra-back-api"

        displayName: "Deploy to DigitalOcean"